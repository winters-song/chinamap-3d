{"version":3,"sources":["service/MapService.js","component/Map.js","App.js","reportWebVitals.js","index.js"],"names":["data","require","node","map","content","forEach","item","area_id","id","areaNodeMap","mapJSON","Province","props","projection","geoData","color","infoRef","useState","active","setActive","meshRef","useRef","useSpring","newColor","pos","extrudeSettings","steps","depth","bevelEnabled","setInfoVisible","val","current","style","visibility","leave","e","intersections","length","move","object","parent","innerHTML","properties","name","left","clientX","top","clientY","group","position","geometry","coordinates","multiPolygon","polygon","shape","THREE","linePoints","i","x","y","moveTo","lineTo","push","ref","args","onPointerLeave","onPointerMove","meshBasicMaterial","transparent","opacity","Line","points","lineWidth","Map","colorFunc","step","d3","center","scale","translate","min","Infinity","max","value","Math","getHourDataMinMax","features","index","areaId","adcode","nodeId","getValue","React","memo","App","setData","setStep","stepRef","useEffect","setInterval","newStep","OrbitControls","intensity","angle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6fdea9eb.chunk.js","sourcesContent":["\nconst data = require('../assets/data.json')\nconst node = require('../assets/node.json')\n\nconst map = {}\nnode.content.forEach(item=> {\n  if(item.area_id){\n    map[item.area_id] = item.id\n  }\n})\n\n// 地区 adcode 对应节点id\nexport const areaNodeMap = map\n\n// 节点24小时数据\nexport const getMapData = () => {\n  return data.content\n}","import React, {useRef,useState} from 'react'\nimport * as d3 from 'd3';\nimport * as THREE from 'three';\nimport {Extrude, Line } from \"@react-three/drei\";\nimport { useSpring, animated } from '@react-spring/three'\nimport {areaNodeMap} from '../service/MapService'\nconst mapJSON = require('../assets/china.json')\n\nfunction Province(props){\n  const {projection, geoData, color, infoRef} = props\n  const [active, setActive] = useState(false)\n  const meshRef = useRef()\n\n  // const newColor = color\n  // const pos = [0,0,0]\n\n\n  const { newColor, pos } = useSpring({\n    // newColor: active ? '#fa0' : color,\n    newColor: color,\n    pos: active ? [0,0,0.1] : [0,0,0]\n  })\n\n\n\n  const extrudeSettings = {\n    steps: 1,\n    depth: 0.1,\n    bevelEnabled: false\n  }\n\n  const setInfoVisible = (val) => {\n    if(infoRef && infoRef.current){\n      infoRef.current.style.visibility = val ?'visible':'hidden'\n    }\n  }\n\n  const leave = (e) => {\n    setActive(false)\n\n    if(!e.intersections.length){\n      setInfoVisible(0)\n    }\n  }\n\n  const move = (e) => {\n    if(e.intersections.length && e.intersections[0].object.parent === meshRef.current.parent){\n      setInfoVisible(1)\n      setActive(true)\n\n      infoRef.current.innerHTML = geoData.properties.name\n      infoRef.current.style.left = e.clientX + 2 + 'px'; // 动态设置提示框的位置\n      infoRef.current.style.top = e.clientY + 2 + 'px';\n    }\n\n  }\n\n  return <animated.group  position={pos} >\n    {\n      geoData.geometry.coordinates.map(multiPolygon => {\n\n        return multiPolygon.map(polygon => {\n\n          const shape = new THREE.Shape();\n          let linePoints = []\n\n          for (let i = 0; i < polygon.length; i++) {\n            const [x, y] = projection(polygon[i]);\n            if (i === 0) {\n              shape.moveTo(x, -y);\n            }\n            shape.lineTo(x, -y);\n            linePoints.push([x, -y, 0.11])\n          }\n\n          return <>\n            <Extrude ref={meshRef} args={[shape, extrudeSettings]} onPointerLeave={leave} onPointerMove={move} >\n              <animated.meshBasicMaterial color={newColor} transparent={true} opacity={1} />\n            </Extrude>\n            <Line points={linePoints} lineWidth={0.5} color=\"#6cf\" />\n          </>\n        })\n      })\n    }\n  </animated.group>\n}\nfunction Map (props) {\n  // data: 省份数据\n  // step: 展示第N小时数据\n  const {infoRef, data, step} = props\n\n  // console.log(step)\n  // 墨卡托投影转换\n  const projection = d3.geoMercator().center([104.0, 37.5]).scale(8).translate([0, 0]);\n\n\n  const getHourDataMinMax = (data, step) => {\n    let min = Infinity\n    let max = 0\n    for(let i in data){\n      const value = data[i].data[step]\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n    return {min, max}\n  }\n\n  let colorFunc\n  if(data){\n    const {min, max} = getHourDataMinMax(data, step)\n\n    colorFunc = d3.scaleSequential([min, max], d3.interpolateBlues)\n  }\n\n  const getValue = (geoData, data, step) => {\n    let areaId = geoData.properties.adcode\n    let nodeId = areaNodeMap[areaId]\n\n    if(nodeId && data[nodeId]){\n      return data[nodeId].data[step]\n    }\n\n    return 0\n  }\n\n  return <group>\n    {\n      mapJSON.features.map((geoData, index) => {\n        const value = getValue(geoData, data, step)\n        const color = colorFunc?colorFunc(value): 'white'\n        return <Province geoData={geoData} projection={projection} infoRef={infoRef} key={index}  color={color}/>\n      })\n    }\n  </group>\n}\n\n\nexport default React.memo(Map)\n","import React, {useRef, useState, useEffect} from 'react'\nimport {Canvas} from 'react-three-fiber';\n\nimport {OrbitControls } from \"@react-three/drei\";\nimport './App.css';\nimport Map from './component/Map'\nimport {getMapData} from './service/MapService'\nfunction App() {\n  const infoRef = useRef()\n  const [data, setData] = useState()\n  const [step, setStep] = useState(0)\n  const stepRef = useRef(step)\n\n  useEffect(() => {\n    setData(getMapData())\n\n    setInterval(() => {\n      let newStep = stepRef.current +1\n      if(newStep>23){\n        newStep = 0\n      }\n      stepRef.current = newStep\n      setStep(newStep)\n    }, 2000)\n  }, [])\n\n  return (\n    <>\n      <Canvas>\n        <OrbitControls />\n        {/*<Stars/>*/}\n        <ambientLight intensity={0.5} />\n        <spotLight position={[10,15,10]} angle={0.3} />\n        <Map infoRef={infoRef} data={data} step={step}/>\n      </Canvas>\n      <div id=\"provinceInfo\" ref={infoRef} />\n    </>\n  );\n}\n\nexport default React.memo(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}